Hex Generator Tool - 

The hex generator tool is used for generating random instruction sequence tests and supports the following set of instructions - 
TODO: Add supported instructions

The tool makes use of the already available Instruction Set simulator for generating the instructions. This helps in maintaining the test 
integrity. The source of the tool is organised in the following manner
hex_gen/src/       - contains the .c and .h files
hex_gen/lib/       - contains the lib files required
hex_gen/tests/     - contains the hex of the instructions to be run either on the model or the RTL
hex_gen/tests/logs - contains the log files of the corresponding instruction hex files

Currently,  the tool is designed as a simple C code but there are plans to extend it to be more object oriented in the future and possibly
using C++ as the base language. The tool makes use of the available rand function in-order to randomly pick the type of the instruction
(this could be either R-type instruction, I-type instruction or J-type instruction). Once the type is known, the opcode and funct field
values are then selected randomly and hence the entire instruction hex is generated. Once the hex is generated the same instruction is
loaded onto simulator memory (which is pointed by the current PC) and then executed. If the execution goes fine - the instruction is added
and proceeds to the next instruction otherwise if the execution fails for some reason, the instruction is re-tried. 

Generating a test - 
Inside hex_gen directory do - 
  make
  ./hex_gen -i <no_of_i_type_instr> -r <no_of_r_type_instr> -j <no_of_j_type_instr>
  (Note: You might need to set the LD_LIBRARY_PATH variable to point to the shared lib area)
  Can be done using - 
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<path_to_the_shared_lib>
  
 Sample output - 
 TODO: Add sample output
